/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as dashboardDashboardImport } from './routes/(dashboard)/_dashboard'
import { Route as NotesNoteIdIndexImport } from './routes/notes/$noteId/index'
import { Route as FlashcardsFlashcardIdIndexImport } from './routes/flashcards/$flashcardId/index'
import { Route as dashboardDashboardNotesIndexImport } from './routes/(dashboard)/_dashboard/notes/index'
import { Route as dashboardDashboardFlashcardsIndexImport } from './routes/(dashboard)/_dashboard/flashcards/index'

// Create Virtual Routes

const dashboardImport = createFileRoute('/(dashboard)')()
const IndexLazyImport = createFileRoute('/')()
const NotesNewIndexLazyImport = createFileRoute('/notes/new/')()
const FlashcardsNewIndexLazyImport = createFileRoute('/flashcards/new/')()
const dashboardDashboardSettingsIndexLazyImport = createFileRoute(
  '/(dashboard)/_dashboard/settings/',
)()
const dashboardDashboardDashboardIndexLazyImport = createFileRoute(
  '/(dashboard)/_dashboard/dashboard/',
)()

// Create/Update Routes

const dashboardRoute = dashboardImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const dashboardDashboardRoute = dashboardDashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => dashboardRoute,
} as any)

const NotesNewIndexLazyRoute = NotesNewIndexLazyImport.update({
  path: '/notes/new/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/notes/new/index.lazy').then((d) => d.Route),
)

const FlashcardsNewIndexLazyRoute = FlashcardsNewIndexLazyImport.update({
  path: '/flashcards/new/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/flashcards/new/index.lazy').then((d) => d.Route),
)

const NotesNoteIdIndexRoute = NotesNoteIdIndexImport.update({
  path: '/notes/$noteId/',
  getParentRoute: () => rootRoute,
} as any)

const FlashcardsFlashcardIdIndexRoute = FlashcardsFlashcardIdIndexImport.update(
  {
    path: '/flashcards/$flashcardId/',
    getParentRoute: () => rootRoute,
  } as any,
)

const dashboardDashboardSettingsIndexLazyRoute =
  dashboardDashboardSettingsIndexLazyImport
    .update({
      path: '/settings/',
      getParentRoute: () => dashboardDashboardRoute,
    } as any)
    .lazy(() =>
      import('./routes/(dashboard)/_dashboard/settings/index.lazy').then(
        (d) => d.Route,
      ),
    )

const dashboardDashboardDashboardIndexLazyRoute =
  dashboardDashboardDashboardIndexLazyImport
    .update({
      path: '/dashboard/',
      getParentRoute: () => dashboardDashboardRoute,
    } as any)
    .lazy(() =>
      import('./routes/(dashboard)/_dashboard/dashboard/index.lazy').then(
        (d) => d.Route,
      ),
    )

const dashboardDashboardNotesIndexRoute =
  dashboardDashboardNotesIndexImport.update({
    path: '/notes/',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

const dashboardDashboardFlashcardsIndexRoute =
  dashboardDashboardFlashcardsIndexImport.update({
    path: '/flashcards/',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/_dashboard': {
      id: '/_dashboard'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardDashboardImport
      parentRoute: typeof dashboardRoute
    }
    '/flashcards/$flashcardId/': {
      id: '/flashcards/$flashcardId/'
      path: '/flashcards/$flashcardId'
      fullPath: '/flashcards/$flashcardId'
      preLoaderRoute: typeof FlashcardsFlashcardIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/notes/$noteId/': {
      id: '/notes/$noteId/'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/flashcards/new/': {
      id: '/flashcards/new/'
      path: '/flashcards/new'
      fullPath: '/flashcards/new'
      preLoaderRoute: typeof FlashcardsNewIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/notes/new/': {
      id: '/notes/new/'
      path: '/notes/new'
      fullPath: '/notes/new'
      preLoaderRoute: typeof NotesNewIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/_dashboard/flashcards/': {
      id: '/_dashboard/flashcards/'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof dashboardDashboardFlashcardsIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/notes/': {
      id: '/_dashboard/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof dashboardDashboardNotesIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/dashboard/': {
      id: '/_dashboard/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof dashboardDashboardDashboardIndexLazyImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/settings/': {
      id: '/_dashboard/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof dashboardDashboardSettingsIndexLazyImport
      parentRoute: typeof dashboardDashboardImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  dashboardRoute: dashboardRoute.addChildren({
    dashboardDashboardRoute: dashboardDashboardRoute.addChildren({
      dashboardDashboardFlashcardsIndexRoute,
      dashboardDashboardNotesIndexRoute,
      dashboardDashboardDashboardIndexLazyRoute,
      dashboardDashboardSettingsIndexLazyRoute,
    }),
  }),
  FlashcardsFlashcardIdIndexRoute,
  NotesNoteIdIndexRoute,
  FlashcardsNewIndexLazyRoute,
  NotesNewIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/",
        "/flashcards/$flashcardId/",
        "/notes/$noteId/",
        "/flashcards/new/",
        "/notes/new/"
      ]
    },
    "/": {
      "filePath": "(dashboard)",
      "children": [
        "/_dashboard"
      ]
    },
    "/_dashboard": {
      "filePath": "(dashboard)/_dashboard.tsx",
      "parent": "/",
      "children": [
        "/_dashboard/flashcards/",
        "/_dashboard/notes/",
        "/_dashboard/dashboard/",
        "/_dashboard/settings/"
      ]
    },
    "/flashcards/$flashcardId/": {
      "filePath": "flashcards/$flashcardId/index.tsx"
    },
    "/notes/$noteId/": {
      "filePath": "notes/$noteId/index.tsx"
    },
    "/flashcards/new/": {
      "filePath": "flashcards/new/index.lazy.tsx"
    },
    "/notes/new/": {
      "filePath": "notes/new/index.lazy.tsx"
    },
    "/_dashboard/flashcards/": {
      "filePath": "(dashboard)/_dashboard/flashcards/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/notes/": {
      "filePath": "(dashboard)/_dashboard/notes/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/dashboard/": {
      "filePath": "(dashboard)/_dashboard/dashboard/index.lazy.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/settings/": {
      "filePath": "(dashboard)/_dashboard/settings/index.lazy.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
